from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
from sklearn.neural_network import MLPClassifier
df = pd.DataFrame({
    "fl/dt": [-0.4485,
              -0.5633,
              0.0643,
              -0.0721,
              -0.1002,
              -0.1421,
              -0.0351,
              0.0724,
              -0.1353,
              -0.2298,
              0.0713,
              0.0109,
              -0.2777,
              0.1454,
              0.3703,
              -0.0757,
              0.0115,
              0.1227,
              -0.2843,
              0.5135,
              0.0769,
              0.3776,
              0.1933,
              0.3248,
              0.3132,
              0.1184,
              -0.0173,
              0.2169,
              0.1703,
              0.146,
              -0.0985,
              0.1398,
              0.1379,
              0.1486,
              0.1633,
              0.2907,
              0.5383,
              -0.333,
              0.5603,
              0.2029,
              0.4746,
              0.1661],
    'ig/at': [-0.4106,
              -0.3114,
              0.0156,
              -0.093,
              -0.0917,
              -0.0651,
              -0.0147,
              -0.0076,
              -0.1433,
              -0.2961,
              0.0205,
              0.0011,
              -0.2316,
              0.05,
              0.1098,
              -0.0821,
              -0.0032,
              0.1055,
              -0.2703,
              0.1001,
              0.0195,
              0.1075,
              0.0473,
              0.0718,
              0.0511,
              0.0499,
              0.0233,
              0.0779,
              0.0695,
              0.0518,
              -0.0123,
              -0.0312,
              0.0728,
              0.0564,
              0.0486,
              0.0597,
              0.1064,
              -0.0854,
              0.1112,
              0.0792,
              0.138,
              0.0351],
    'ac/pc': [1.0865,
              1.5134,
              1.0077,
              1.4544,
              1.5644,
              0.7066,
              1.5046,
              1.3723,
              1.4196,
              0.331,
              1.3124,
              2.1495,
              1.1918,
              1.8762,
              1.9941,
              1.5077,
              1.2602,
              1.1434,
              1.2722,
              2.4871,
              2.0069,
              3.2651,
              2.2506,
              4.2401,
              4.45,
              2.521,
              2.0538,
              2.3489,
              1.7973,
              2.1692,
              2.5029,
              0.4611,
              2.6123,
              2.2347,
              2.308,
              1.8381,
              2.3293,
              3.0124,
              4.2918,
              1.9936,
              2.9166,
              2.4527],
    'ac/vn': [0.4526,
              0.1642,
              0.3978,
              0.2589,
              0.6683,
              0.2794,
              0.708,
              0.3361,
              0.4347,
              0.1824,
              0.2497,
              0.6969,
              0.6601,
              0.2723,
              0.3828,
              0.4215,
              0.6038,
              0.1655,
              0.5128,
              0.5368,
              0.5304,
              0.3548,
              0.3309,
              0.6279,
              0.6852,
              0.6925,
              0.3484,
              0.397,
              0.5174,
              0.55,
              0.5778,
              0.2643,
              0.5151,
              0.5563,
              0.1978,
              0.3786,
              0.4835,
              0.473,
              0.4443,
              0.3018,
              0.4487,
              0.137
              ],
    'decision':
    [0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     0,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1,
     1
     ]})


entrada = ["fl/dt", 'ig/at', 'ac/pc', 'ac/vn']
salida = ['decision']
x = df[entrada]
y = df[salida]
if len(salida) == 1:
    y = np.ravel(y)
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2)
escalar = StandardScaler()
xtrain = escalar.fit_transform(xtrain)
xtest = escalar.transform(xtest)


modelo = MLPClassifier(activation='logistic', max_iter=100,
                       hidden_layer_sizes=(3,), solver='lbfgs')
modelo.fit(xtrain, ytrain)
modelo.predict(xtrain)

modelo.predict(xtest)
print('precision : ', modelo.score(xtest, ytest))

dfquery = pd.DataFrame({
    "fl/dt": [-0.0653,
              -0.0566,
              1.3737,
              0.4032],
    'ig/at': [0.0451,
              0.0263,
              1.6756,
              0.9494],
    'ac/pc': [0.4785,
              0.091,
              1.2444,
              0.1847],
    'ac/vn': [0.5808,
              0.0371,
              5.0594,
              0.1268]
})
xq = dfquery[entrada]
print('datos de consulta : ', xq)

xq = escalar.transform(xq)
print('predicciones : ', modelo.predict(xq))
